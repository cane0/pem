{"version":3,"file":"ExpoGooglePlacesAutocompleteView.js","sourceRoot":"","sources":["../src/ExpoGooglePlacesAutocompleteView.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { SearchInput, Prediction, ListFooter } from \"./components\";\nimport PlacesAutocomplete from \"./ExpoGooglePlacesAutocompleteModule\";\nimport { Place, PlacesError } from \"./types\";\nimport { GooglePlacesAutocompleteProps } from \"./types/GooglePlacesAutocompleteProps\";\n\nexport default function ExpoGooglePlacesAutocompleteView({\n  apiKey,\n  placeholder,\n  requestConfig,\n  onPlaceSelected,\n  onSearchError,\n  inputRef,\n  containerStyle,\n  searchInputStyle,\n  inputContainerStyle,\n  resultsContainerStyle,\n  resultItemStyle,\n  listFooterStyle,\n}: GooglePlacesAutocompleteProps) {\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [predictions, setPredictions] = React.useState<Place[]>([]);\n\n  React.useEffect(() => {\n    PlacesAutocomplete.initPlaces(apiKey);\n  }, [apiKey]);\n\n  const onSelectPlace = React.useCallback(\n    async (placeId: string, fullText: string) => {\n      try {\n        const details = await PlacesAutocomplete.placeDetails(placeId);\n        setInputValue(fullText);\n        setPredictions([]);\n        onPlaceSelected(details);\n      } catch (e) {\n        const error = e as PlacesError;\n        onSearchError?.(error);\n      }\n    },\n    [onPlaceSelected, onSearchError]\n  );\n\n  const onChangeText = React.useCallback(\n    async (text: string) => {\n      try {\n        let result = await PlacesAutocomplete.findPlaces(text, requestConfig);\n        setPredictions(result.places);\n        setInputValue(text);\n      } catch (e) {\n        const error = e as PlacesError;\n        onSearchError?.(error);\n      }\n    },\n    [requestConfig]\n  );\n\n  return (\n    <View style={[styles.container, containerStyle]}>\n      <SearchInput\n        ref={inputRef}\n        inputValue={inputValue}\n        style={searchInputStyle}\n        inputContainerStyle={inputContainerStyle}\n        onChangeText={onChangeText}\n        placeholder={placeholder || \"Search for your address...\"}\n        clearButtonMode=\"while-editing\"\n      />\n      {predictions.length > 0 ? (\n        <View style={resultsContainerStyle}>\n          {predictions.map(prediction => (\n            <Prediction\n              key={prediction.placeId}\n              place={prediction}\n              style={resultItemStyle}\n              onSelectPlace={() =>\n                onSelectPlace(prediction.placeId, prediction.fullText)\n              }\n            />\n          ))}\n          <ListFooter style={listFooterStyle} />\n        </View>\n      ) : null}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n  },\n});\n"]}